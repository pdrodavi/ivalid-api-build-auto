name: Build and Push Docker Image to Docker Hub

on:
  workflow_dispatch:
  
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      attestations: write
      id-token: write
    
    steps:

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read values.json
        id: values
        uses: juliangruber/read-file-action@v1
        with:
          path: ./ACTION_CONFIG/values.json

      - name: Set up JDK ${{ fromJson(steps.values.outputs.content).java }}
        uses: actions/setup-java@v4
        with:
          java-version: "${{ fromJson(steps.values.outputs.content).java }}"
          distribution: 'temurin'
          cache: maven

      - name: Cache SonarQube Cloud packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=pdrodavi_ivalid-api

      - name: Build with Maven (Package)
        run: mvn -Dmaven.test.skip=true -Dmaven.test.failure.ignore clean package --file pom.xml

      - name: Create Dockerfile ${{ fromJson(steps.values.outputs.content).name }} by API
        id: requestService
        uses: tyrrrz/action-http-request@master
        with:
            url: https://apidockerfile.pdro.com.br/gendockerfile/v1/?appName=${{ fromJson(steps.values.outputs.content).name }}&platform=java&version=${{ fromJson(steps.values.outputs.content).java }}
            method: GET
            retry-count: 3
            retry-delay: 500
  
      - name: Response Create Dockerfile ${{ fromJson(steps.values.outputs.content).name }} by API
        run: |
          echo "Status: ${{ steps.requestService.outputs.status }}"
          echo "Success: ${{ steps.requestService.outputs.success }}"
          echo "Headers: ${{ steps.requestService.outputs.headers }}"
          echo "Body: ${{ steps.requestService.outputs.body }}"   
          echo "${{ steps.requestService.outputs.body }}" > Dockerfile
          ls -a
          cat Dockerfile

      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag pdrodavi/${{ fromJson(steps.values.outputs.content).name }}:${{ fromJson(steps.values.outputs.content).version }}
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_TOKEN}}
      - name: Create Repo in Docker Hub
        run: docker tag pdrodavi/${{ fromJson(steps.values.outputs.content).name }}:${{ fromJson(steps.values.outputs.content).version }} pdrodavi/${{ fromJson(steps.values.outputs.content).name }}:${{ fromJson(steps.values.outputs.content).version }}
      - name: Publish to Docker Hub
        run: docker push pdrodavi/${{ fromJson(steps.values.outputs.content).name }}:${{ fromJson(steps.values.outputs.content).version }}
